extends Node

# –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä—ã
var music_player: AudioStreamPlayer
var sfx_player: AudioStreamPlayer

# –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
var pop_sounds := []

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
var is_music_paused_by_visibility := false
var music_position_before_pause := 0.0
var was_music_playing_before_hide := false

func _ready():
	print("AudioManager initialized")
	_setup_audio_players()
	_load_sounds()
	
	# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏–≥–Ω–∞–ª—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–∑ YandexGames
	if Engine.has_singleton("YandexGames"):
		YandexGames.visibility_changed.connect(_on_visibility_changed)
		print("‚úÖ Connected to YandexGames visibility_changed signal")
	else:
		# –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
		_setup_desktop_visibility_listeners()
	
	play_music()

func _setup_desktop_visibility_listeners():
	"""–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø –≤–µ—Ä—Å–∏–∏"""
	print("üñ•Ô∏è Setting up desktop visibility listeners")
	# –í –¥–µ—Å–∫—Ç–æ–ø –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Window focus —Å–æ–±—ã—Ç–∏—è
	var window = get_window()
	if window:
		window.focus_entered.connect(func(): 
			print("üîò Window focused")
			_on_visibility_changed(false)
		)
		window.focus_exited.connect(func(): 
			print("üîò Window unfocused") 
			_on_visibility_changed(true)
		)

func _setup_audio_players():
	# –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä
	music_player = AudioStreamPlayer.new()
	music_player.bus = "Music"
	music_player.volume_db = -5.0
	add_child(music_player)
	
	# SFX –ø–ª–µ–µ—Ä
	sfx_player = AudioStreamPlayer.new()
	sfx_player.bus = "SFX"
	sfx_player.volume_db = 0.0
	add_child(sfx_player)

func _load_sounds():
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –º—É–∑—ã–∫—É
	if ResourceLoader.exists("res://assets/audio/bg.mp3"):
		var music = load("res://assets/audio/bg.mp3")
		music_player.stream = music
		print("‚úÖ Background music loaded")
	else:
		push_warning("‚ö†Ô∏è Background music not found: res://assets/audio/bg.mp3")
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ –ª–æ–ø–∞–Ω–∏—è
	var pop_paths = [
		"res://assets/audio/pop1.ogg",
		"res://assets/audio/pop2.ogg",
		"res://assets/audio/pop3.ogg"
	]
	
	for path in pop_paths:
		if ResourceLoader.exists(path):
			var sound = load(path)
			if sound:
				pop_sounds.append(sound)
				print("‚úÖ Pop sound loaded: ", path)
			else:
				push_warning("‚ö†Ô∏è Failed to load pop sound: " + path)
		else:
			push_warning("‚ö†Ô∏è Pop sound not found: " + path)
	
	print("Total pop sounds loaded: ", pop_sounds.size())

func _on_visibility_changed(is_hidden: bool):
	"""
	–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ò–≥—Ä:
	–ü—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫
	"""
	print("üëÅÔ∏è AudioManager: Visibility changed to ", "hidden" if is_hidden else "visible")
	
	if is_hidden:
		# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É
		was_music_playing_before_hide = music_player.playing
		if was_music_playing_before_hide:
			music_position_before_pause = music_player.get_playback_position()
			music_player.stop()
			is_music_paused_by_visibility = true
			print("üîá Music paused (page hidden), position: ", music_position_before_pause)
	else:
		# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º—É–∑—ã–∫—É
		if is_music_paused_by_visibility and was_music_playing_before_hide:
			# –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
			await get_tree().create_timer(0.1).timeout
			if music_player.stream:
				music_player.play(music_position_before_pause)
				is_music_paused_by_visibility = false
				was_music_playing_before_hide = false
				print("üîä Music resumed (page visible), position: ", music_position_before_pause)
			else:
				print("‚ùå Cannot resume music: no stream")

func play_music():
	if music_player.stream and not music_player.playing:
		music_player.play()
		# –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É
		if not music_player.finished.is_connected(_on_music_finished):
			music_player.finished.connect(_on_music_finished)
		print("üéµ Music started")

func _on_music_finished():
	music_player.play()
	print("üéµ Music looped")

func stop_music():
	music_player.stop()
	is_music_paused_by_visibility = false
	was_music_playing_before_hide = false
	print("‚èπÔ∏è Music stopped")

func pause_music():
	if music_player.playing:
		music_position_before_pause = music_player.get_playback_position()
		music_player.stop()
		print("‚è∏Ô∏è Music paused manually")

func resume_music():
	if music_player.stream and not music_player.playing:
		music_player.play(music_position_before_pause)
		print("‚ñ∂Ô∏è Music resumed manually")

func play_pop_sound():
	if pop_sounds.is_empty():
		push_warning("‚ö†Ô∏è No pop sounds available")
		return
	
	# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–≤—É–∫
	var random_sound = pop_sounds.pick_random()
	
	# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
	var temp_player = AudioStreamPlayer.new()
	temp_player.bus = "SFX"
	temp_player.stream = random_sound
	temp_player.volume_db = randf_range(-2.0, 2.0)
	temp_player.pitch_scale = randf_range(0.9, 1.1)
	add_child(temp_player)
	
	temp_player.play()
	
	# –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
	temp_player.finished.connect(func(): 
		if is_instance_valid(temp_player):
			temp_player.queue_free()
	)

func set_music_volume(volume: float):
	music_player.volume_db = volume
	print("üéµ Music volume set to: ", volume)

func set_sfx_volume(volume: float):
	sfx_player.volume_db = volume
	print("üîä SFX volume set to: ", volume)
