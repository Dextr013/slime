extends Node

var is_initialized := false
var is_game_ready := false
var player_data := {}
var js_callback = null 

signal sdk_ready
signal game_ready_sent
signal player_data_loaded(data)
signal achievement_unlocked(id)
signal gameplay_started
signal gameplay_stopped
signal visibility_changed(hidden: bool)

func _ready():
	print("YandexGames autoload initialized")
	
	if OS.has_feature("web"):
		print("üåê Web platform detected, initializing Yandex Games SDK...")
		js_callback = JavaScriptBridge.create_callback(_on_js_callback)
		_setup_js_bridge()
		_setup_visibility_listeners()
		_init_sdk()
	else:
		print("üíª Desktop platform, using mock SDK")
		is_initialized = true
		is_game_ready = true
		emit_signal("sdk_ready")
		emit_signal("game_ready_sent")

func _setup_js_bridge():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É JavaScript –∏ Godot"""
	var code = """
	(function() {
		// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
		window.godotYandexCallback = function(args) {
			if (window.godotInstance && typeof window.godotInstance.call === 'function') {
				window.godotInstance.call('YandexGames', '_on_js_callback', args);
			} else {
				console.warn('Godot instance not ready yet');
			}
		};
		console.log('‚úÖ Godot-JS bridge setup complete');
	})();
	"""
	JavaScriptBridge.eval(code)

func _init_sdk():
	"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä"""
	var code = """
	(function() {
		console.log('üöÄ Starting Yandex Games SDK initialization...');
		
		if (typeof YaGames === 'undefined') {
			console.error('‚ùå YaGames SDK not found!');
			window.godotYandexCallback(['sdk_error', 'YaGames not defined']);
			return;
		}
		
		try {
			YaGames.init().then(ysdk => {
				console.log('‚úÖ YaGames SDK initialized successfully');
				window.ysdk = ysdk;
				
				// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
				return ysdk.getPlayer({ signed: false });
			}).then(player => {
				console.log('‚úÖ Player loaded');
				window.player = player;
				
				// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
				return player.getData();
			}).then(data => {
				console.log('‚úÖ Player data loaded:', data);
				window.godotYandexCallback(['sdk_initialized', data || {}]);
			}).catch(error => {
				console.error('‚ùå SDK initialization error:', error);
				window.godotYandexCallback(['sdk_error', error.toString()]);
			});
		} catch (error) {
			console.error('‚ùå SDK initialization exception:', error);
			window.godotYandexCallback(['sdk_error', error.toString()]);
		}
	})();
	"""
	
	JavaScriptBridge.eval(code)

func _setup_visibility_listeners():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
	var code = """
	(function() {
		console.log('üëÅÔ∏è Setting up visibility listeners...');
		
		var handleVisibilityChange = function(isHidden) {
			console.log('üìÑ Visibility changed:', isHidden);
			if (window.godotYandexCallback) {
				window.godotYandexCallback(['visibility_changed', isHidden]);
			}
		};
		
		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
		document.addEventListener('visibilitychange', function() {
			handleVisibilityChange(document.hidden);
		});
		
		// –°–æ–±—ã—Ç–∏—è —Ñ–æ–∫—É—Å–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
		window.addEventListener('blur', function() {
			handleVisibilityChange(true);
		});
		
		window.addEventListener('focus', function() {
			handleVisibilityChange(false);
		});
		
		// iOS —Å–æ–±—ã—Ç–∏—è
		window.addEventListener('pagehide', function() {
			handleVisibilityChange(true);
		});
		
		window.addEventListener('pageshow', function() {
			handleVisibilityChange(false);
		});
		
		console.log('‚úÖ Visibility listeners setup complete');
	})();
	"""
	JavaScriptBridge.eval(code)

func _on_js_callback(args):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∏–∑ JavaScript"""
	if args.size() == 0:
		return
	
	var event_type = args[0]
	print("üìû JS Callback received: ", event_type)
	
	match event_type:
		"sdk_initialized":
			if args.size() > 1:
				player_data = args[1] if args[1] != null else {}
				print("üì¶ Player data loaded: ", player_data)
			is_initialized = true
			emit_signal("sdk_ready")
			print("‚úÖ SDK fully initialized and ready")
			
		"sdk_error":
			var error_msg = args[1] if args.size() > 1 else "Unknown error"
			push_error("‚ùå SDK initialization failed: " + error_msg)
			# –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
			is_initialized = true
			emit_signal("sdk_ready")
			
		"player_data_loaded":
			if args.size() > 1:
				player_data = args[1] if args[1] != null else {}
				emit_signal("player_data_loaded", player_data)
				
		"save_completed":
			print("‚úÖ Save completed successfully")
			
		"save_error":
			push_error("‚ùå Save failed")
			
		"visibility_changed":
			if args.size() > 1:
				var is_hidden = args[1]
				print("üëÅÔ∏è Visibility changed: ", is_hidden)
				emit_signal("visibility_changed", is_hidden)
				
				if AudioManager:
					AudioManager._on_visibility_changed(is_hidden)
					
		"ad_closed":
			print("üì∫ Ad closed")
			if AudioManager:
				AudioManager.play_music()
				
		"ad_error":
			print("‚ùå Ad error")
			if AudioManager:
				AudioManager.play_music()

func send_game_ready():
	"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã"""
	if not OS.has_feature("web"):
		is_game_ready = true
		emit_signal("game_ready_sent")
		print("‚úÖ Game Ready sent (desktop)")
		return
	
	if not is_initialized:
		print("‚è≥ Waiting for SDK initialization before sending GameReady...")
		await sdk_ready
	
	var code = """
	(function() {
		console.log('üéÆ Sending GameReady...');
		
		if (window.ysdk && window.ysdk.features && window.ysdk.features.LoadingAPI) {
			try {
				window.ysdk.features.LoadingAPI.ready();
				console.log('‚úÖ GameReady sent successfully');
				return true;
			} catch (error) {
				console.error('‚ùå GameReady error:', error);
				return false;
			}
		} else {
			console.warn('‚ö†Ô∏è LoadingAPI not available, game will continue anyway');
			return true;
		}
	})();
	"""
	
	var result = JavaScriptBridge.eval(code)
	if result:
		is_game_ready = true
		emit_signal("game_ready_sent")
		print("‚úÖ Game Ready sent to Yandex")
	else:
		print("‚ö†Ô∏è GameReady failed, but continuing game anyway")
		is_game_ready = true
		emit_signal("game_ready_sent")

func gameplay_start():
	"""–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–π–º–ø–ª–µ—è"""
	if not OS.has_feature("web"):
		emit_signal("gameplay_started")
		return
	
	var code = """
	(function() {
		if (window.ysdk && window.ysdk.features && window.ysdk.features.GameplayAPI) {
			window.ysdk.features.GameplayAPI.start();
			console.log('üéÆ Gameplay started');
		}
	})();
	"""
	JavaScriptBridge.eval(code)
	emit_signal("gameplay_started")
	print("üéÆ Gameplay started")

func gameplay_stop():
	"""–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–µ–π–º–ø–ª–µ—è"""
	if not OS.has_feature("web"):
		emit_signal("gameplay_stopped")
		return
	
	var code = """
	(function() {
		if (window.ysdk && window.ysdk.features && window.ysdk.features.GameplayAPI) {
			window.ysdk.features.GameplayAPI.stop();
			console.log('‚è∏Ô∏è Gameplay stopped');
		}
	})();
	"""
	JavaScriptBridge.eval(code)
	emit_signal("gameplay_stopped")
	print("‚è∏Ô∏è Gameplay stopped")

func save_data(data: Dictionary):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
	if not OS.has_feature("web"):
		print("üíæ Save data (desktop): ", data)
		return
	
	if not is_initialized:
		print("‚è≥ Waiting for SDK before save...")
		await sdk_ready
	
	var json_data = JSON.stringify(data)
	var code = """
	(function() {
		console.log('üíæ Attempting to save data...');
		
		if (window.player && window.player.setData) {
			window.player.setData(%s, true)
				.then(() => {
					console.log('‚úÖ Data saved successfully');
					window.godotYandexCallback(['save_completed']);
				})
				.catch(error => {
					console.error('‚ùå Save error:', error);
					window.godotYandexCallback(['save_error']);
				});
		} else {
			console.warn('‚ö†Ô∏è Player API not available for saving');
			window.godotYandexCallback(['save_completed']); // –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
		}
	})();
	""" % [json_data]
	
	JavaScriptBridge.eval(code)

func load_data() -> Dictionary:
	"""–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
	if not OS.has_feature("web"):
		print("üì• Load data (desktop)")
		return {}
	
	if not is_initialized:
		print("‚è≥ Waiting for SDK before load...")
		await sdk_ready
	
	print("üì• Loading data from Yandex...")
	
	# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
	if not player_data.is_empty():
		print("üì¶ Using cached player data: ", player_data)
		return player_data
	
	# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ JS
	var code = """
	(function() {
		console.log('üì• Loading player data...');
		
		if (window.player && window.player.getData) {
			window.player.getData()
				.then(data => {
					console.log('‚úÖ Player data loaded:', data);
					window.godotYandexCallback(['player_data_loaded', data || {}]);
				})
				.catch(error => {
					console.error('‚ùå Load error:', error);
					window.godotYandexCallback(['player_data_loaded', {}]);
				});
		} else {
			console.warn('‚ö†Ô∏è Player API not available for loading');
			window.godotYandexCallback(['player_data_loaded', {}]);
		}
	})();
	"""
	
	JavaScriptBridge.eval(code)
	
	# –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	var wait_time = 0.0
	while player_data.is_empty() and wait_time < 3.0:
		await get_tree().create_timer(0.1).timeout
		wait_time += 0.1
	
	if player_data.is_empty():
		print("‚ö†Ô∏è No player data received after waiting, using empty dict")
		player_data = {}
	
	print("üì¶ Final loaded data: ", player_data)
	return player_data

func set_leaderboard_score(leaderboard_name: String, score: int):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤"""
	if not OS.has_feature("web"):
		print("üèÜ Leaderboard (desktop): ", leaderboard_name, " = ", score)
		return
	
	var code = """
	(function() {
		if (window.ysdk && window.ysdk.getLeaderboards) {
			window.ysdk.getLeaderboards().then(lb => {
				lb.setLeaderboardScore('%s', %d)
					.then(() => console.log('üèÜ Score set to leaderboard'))
					.catch(err => console.error('‚ùå Leaderboard error:', err));
			});
		}
	})();
	""" % [leaderboard_name, score]
	JavaScriptBridge.eval(code)

func unlock_achievement(achievement_id: String):
	"""–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
	if not OS.has_feature("web"):
		print("üèÖ Achievement unlocked (desktop): ", achievement_id)
		emit_signal("achievement_unlocked", achievement_id)
		return
	
	var code = """
	(function() {
		if (window.player && window.player.setAchievements) {
			window.player.setAchievements([{id: '%s', progress: 100}])
				.then(() => console.log('üèÖ Achievement unlocked:', '%s'))
				.catch(err => console.error('‚ùå Achievement error:', err));
		}
	})();
	""" % [achievement_id, achievement_id]
	JavaScriptBridge.eval(code)
	emit_signal("achievement_unlocked", achievement_id)

func show_fullscreen_ad():
	"""–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã"""
	if not OS.has_feature("web"):
		print("üì∫ Fullscreen ad (desktop)")
		return
	
	gameplay_stop()
	
	var code = """
	(function() {
		if (window.ysdk && window.ysdk.adv) {
			window.ysdk.adv.showFullscreenAdv({
				callbacks: {
					onClose: function(wasShown) {
						console.log('üì∫ Ad closed, wasShown:', wasShown);
						window.godotYandexCallback(['ad_closed', wasShown]);
					},
					onError: function(error) {
						console.error('‚ùå Ad error:', error);
						window.godotYandexCallback(['ad_error']);
					}
				}
			});
		} else {
			console.warn('‚ö†Ô∏è Adv API not available');
			window.godotYandexCallback(['ad_closed', false]);
		}
	})();
	"""
	JavaScriptBridge.eval(code)

func show_rewarded_ad():
	"""–ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"""
	if not OS.has_feature("web"):
		print("üéÅ Rewarded ad (desktop)")
		return
	
	gameplay_stop()
	
	var code = """
	(function() {
		if (window.ysdk && window.ysdk.adv) {
			window.ysdk.adv.showRewardedVideo({
				callbacks: {
					onRewarded: function() {
						console.log('üéÅ Reward granted');
						window.godotYandexCallback(['ad_rewarded']);
					},
					onClose: function() {
						console.log('üì∫ Rewarded ad closed');
						window.godotYandexCallback(['ad_closed', false]);
					},
					onError: function(error) {
						console.error('‚ùå Rewarded ad error:', error);
						window.godotYandexCallback(['ad_error']);
					}
				}
			});
		} else {
			console.warn('‚ö†Ô∏è Adv API not available');
			window.godotYandexCallback(['ad_closed', false]);
		}
	})();
	"""
	JavaScriptBridge.eval(code)
