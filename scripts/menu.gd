# menu.gd - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å" —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö
extends Control

var DebugChecker

@onready var play_button = $CenterContainer/VBoxContainer/PlayButton
@onready var animated_title = $CenterContainer/VBoxContainer/AnimatedTitle
@onready var high_score_label = $CenterContainer/VBoxContainer/HighScoreLabel

var sdk_timeout_reached := false
var data_timeout_reached := false
var safe_area_top := 0
var safe_area_bottom := 0
var is_ready := false

func _ready():
	_setup_display_mode()
	_setup_safe_area()
	_setup_fullscreen()
	_show_loading()
	
	# –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK
	_setup_play_button_early()
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	if OS.has_feature("web"):
		print("‚è≥ Waiting for Yandex Games SDK...")
		sdk_timeout_reached = false
		
		var timeout_timer = get_tree().create_timer(5.0)
		timeout_timer.timeout.connect(_on_sdk_timeout)
		
		await YandexGames.sdk_ready
		if not sdk_timeout_reached:
			print("‚úÖ SDK initialized")
		else:
			print("‚ö†Ô∏è SDK timeout, using fallback")
	
	# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞ –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
	if not I18n.is_ready:
		print("‚è≥ Waiting for I18n...")
		await I18n.language_ready
		print("‚úÖ I18n ready")
	
	# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	print("‚è≥ Loading game data...")
	data_timeout_reached = false
	var data_timer = get_tree().create_timer(5.0)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 5 —Å–µ–∫—É–Ω–¥
	data_timer.timeout.connect(_on_data_timeout)
	
	# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ call_deferred –¥–ª—è await
	GameManager.load_game_data()
	
	# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
	await get_tree().create_timer(5.0).timeout
	
	if not data_timeout_reached:
		print("‚úÖ Game data loaded")
	else:
		print("‚ö†Ô∏è Game data load timeout, using defaults")
	
	_setup_ui()
	_hide_loading()
	
	# GameReady –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
	if OS.has_feature("web"):
		print("üì§ Sending GameReady...")
		YandexGames.send_game_ready()
		print("‚úÖ GameReady sent")
	
	is_ready = true
	
	# –û—Ç–ª–∞–¥—á–∏–∫
	if Engine.has_singleton("DebugChecker"):
		DebugChecker = Engine.get_singleton("DebugChecker")
		DebugChecker.check_all()

func _setup_play_button_early():
	"""–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞–¥–µ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
	if not play_button:
		push_error("‚ùå Play button not found!")
		return
	
	# –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if play_button.pressed.is_connected(_on_play_pressed):
		play_button.pressed.disconnect(_on_play_pressed)
	if play_button.gui_input.is_connected(_on_play_button_gui_input):
		play_button.gui_input.disconnect(_on_play_button_gui_input)
	
	# –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
	play_button.pressed.connect(_on_play_pressed)
	play_button.gui_input.connect(_on_play_button_gui_input)
	
	# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
	play_button.focus_mode = Control.FOCUS_ALL
	play_button.mouse_filter = Control.MOUSE_FILTER_STOP
	
	# –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
	play_button.disabled = false
	play_button.visible = true
	
	print("‚úÖ Play button early setup complete")

func _on_play_button_gui_input(event: InputEvent):
	"""–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞"""
	if not is_ready or not play_button or play_button.disabled:
		return
	
	if event is InputEventScreenTouch:
		if event.pressed:
			print("üëÜ Touch detected on play button!")
			# –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
			get_viewport().set_input_as_handled()
			_on_play_pressed()
	elif event is InputEventMouseButton:
		if event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
			print("üñ±Ô∏è Click detected on play button!")
			get_viewport().set_input_as_handled()
			_on_play_pressed()

func _setup_display_mode():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
	if OS.has_feature("mobile"):
		DisplayServer.screen_set_orientation(DisplayServer.SCREEN_PORTRAIT)
		print("üì± Mobile portrait mode")
	elif OS.has_feature("web"):
		var screen_size = DisplayServer.screen_get_size()
		if screen_size.x < screen_size.y:
			DisplayServer.screen_set_orientation(DisplayServer.SCREEN_PORTRAIT)
			print("üåê Web mobile portrait")
		else:
			DisplayServer.screen_set_orientation(DisplayServer.SCREEN_LANDSCAPE)
			print("üåê Web desktop landscape")
	else:
		DisplayServer.screen_set_orientation(DisplayServer.SCREEN_LANDSCAPE)
		print("üíª Desktop landscape")

func _setup_safe_area():
	"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Safe Area –¥–ª—è iOS"""
	if OS.has_feature("mobile"):
		var safe_rect = DisplayServer.get_display_safe_area()
		safe_area_top = safe_rect.position.y
		safe_area_bottom = DisplayServer.screen_get_size().y - (safe_rect.position.y + safe_rect.size.y)
		
		print("üì± Safe Area - Top: ", safe_area_top, " Bottom: ", safe_area_bottom)
		
		var center_container = $CenterContainer
		if center_container and safe_area_top > 0:
			center_container.add_theme_constant_override("margin_top", safe_area_top)
			center_container.add_theme_constant_override("margin_bottom", safe_area_bottom)
			print("‚úÖ Menu adjusted for safe area")

func _on_sdk_timeout():
	if not YandexGames.is_initialized:
		sdk_timeout_reached = true
		print("‚ö†Ô∏è SDK timeout")
		YandexGames.is_initialized = true
		YandexGames.emit_signal("sdk_ready")

func _on_data_timeout():
	data_timeout_reached = true
	print("‚ö†Ô∏è Data timeout")

func _setup_fullscreen():
	var window = get_window()
	if window:
		if OS.has_feature("mobile") or OS.has_feature("web"):
			window.mode = Window.MODE_FULLSCREEN
		else:
			window.mode = Window.MODE_WINDOWED
			window.size = Vector2i(1280, 720)
		
		window.unresizable = true
		print("üñ•Ô∏è Window size: ", window.size)
		
		_setup_menu_viewport()
		
		if OS.has_feature("web"):
			_apply_web_fullscreen_fix()
		
		print("‚úÖ Menu setup complete")

func _setup_menu_viewport():
	var viewport = get_viewport()
	if viewport:
		viewport.size = get_window().size
		viewport.canvas_item_default_texture_filter = Viewport.DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST
		
		if OS.has_feature("mobile") or (OS.has_feature("web") and DisplayServer.screen_get_orientation() == DisplayServer.SCREEN_PORTRAIT):
			viewport.size_2d_override_size = Vector2i(720, 1280)
		else:
			viewport.size_2d_override_size = Vector2i(1280, 720)
		
		print("üì± Menu viewport: ", viewport.size)

func _apply_web_fullscreen_fix():
	var js_code = """
	(function() {
		var style = document.createElement('style');
		style.textContent = `
			* { 
				margin: 0; 
				padding: 0; 
				box-sizing: border-box;
				-webkit-tap-highlight-color: transparent;
			}
			html, body { 
				width: 100%; 
				height: 100%; 
				overflow: hidden; 
				background: #000;
				position: fixed;
				touch-action: manipulation;
				-webkit-user-select: none;
				user-select: none;
			}
			canvas { 
				width: 100% !important; 
				height: 100% !important; 
				display: block;
				position: fixed;
				top: 0; 
				left: 0;
				touch-action: none;
			}
		`;
		document.head.appendChild(style);
		
		// –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –í–°–ï –∂–µ—Å—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
		var preventDefault = function(e) { 
			e.preventDefault(); 
			return false; 
		};
		
		document.addEventListener('gesturestart', preventDefault);
		document.addEventListener('gesturechange', preventDefault);
		document.addEventListener('gestureend', preventDefault);
		
		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
		document.addEventListener('touchstart', function(e) {
			if (e.touches.length > 1) {
				e.preventDefault();
			}
		}, { passive: false });
		
		document.addEventListener('touchmove', function(e) {
			if (e.touches.length > 1) {
				e.preventDefault();
			}
		}, { passive: false });
		
		// –ù–û–í–û–ï: –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 300ms –Ω–∞ –∫–ª–∏–∫–∏
		var FastClick = function(element) {
			var timeout;
			element.addEventListener('touchstart', function() {
				timeout = setTimeout(function() {
					timeout = null;
				}, 300);
			});
			element.addEventListener('touchend', function(event) {
				if (timeout) {
					clearTimeout(timeout);
					event.preventDefault();
					event.target.click();
					return false;
				}
			});
		};
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º FastClick –∫–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
		if (document.body) {
			FastClick(document.body);
		}
		
		// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø –¥–ª—è –∑—É–º–∞
		var lastTouchEnd = 0;
		document.addEventListener('touchend', function(event) {
			var now = Date.now();
			if (now - lastTouchEnd <= 300) {
				event.preventDefault();
			}
			lastTouchEnd = now;
		}, false);
		
		console.log('‚úÖ Web fullscreen fix with FastClick applied');
	})();
	"""
	JavaScriptBridge.eval(js_code)

func _show_loading():
	if play_button:
		play_button.disabled = true
		play_button.text = I18n.translate("loading")

func _hide_loading():
	if play_button:
		play_button.disabled = false
		# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ —è–∑—ã–∫ –≥–æ—Ç–æ–≤
		play_button.text = I18n.translate("play") if I18n.is_ready else "PLAY"

func _setup_ui():
	if animated_title and animated_title.has_method("set_rainbow_colors"):
		animated_title.set_rainbow_colors()
	
	if not play_button:
		push_error("‚ùå Play button not found in _setup_ui!")
		return
	
	play_button.text = I18n.translate("play")
	
	# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—â–µ –±–æ–ª—å—à–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
	if OS.has_feature("mobile") or OS.has_feature("web"):
		# –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞
		play_button.custom_minimum_size = Vector2(600, 180)
		play_button.add_theme_font_size_override("font_size", 56)
		
		# –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å —Å padding
		var style_normal = StyleBoxFlat.new()
		style_normal.bg_color = Color(0.2, 0.6, 1.0, 0.9)
		style_normal.corner_radius_top_left = 25
		style_normal.corner_radius_top_right = 25
		style_normal.corner_radius_bottom_left = 25
		style_normal.corner_radius_bottom_right = 25
		style_normal.content_margin_top = 50
		style_normal.content_margin_bottom = 50
		style_normal.content_margin_left = 80
		style_normal.content_margin_right = 80
		style_normal.border_width_left = 4
		style_normal.border_width_top = 4
		style_normal.border_width_right = 4
		style_normal.border_width_bottom = 4
		style_normal.border_color = Color.WHITE
		play_button.add_theme_stylebox_override("normal", style_normal)
		
		# –°—Ç–∏–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
		var style_pressed = StyleBoxFlat.new()
		style_pressed.bg_color = Color(0.1, 0.4, 0.8, 1.0)
		style_pressed.corner_radius_top_left = 25
		style_pressed.corner_radius_top_right = 25
		style_pressed.corner_radius_bottom_left = 25
		style_pressed.corner_radius_bottom_right = 25
		style_pressed.content_margin_top = 50
		style_pressed.content_margin_bottom = 50
		style_pressed.content_margin_left = 80
		style_pressed.content_margin_right = 80
		play_button.add_theme_stylebox_override("pressed", style_pressed)
		
		# –°—Ç–∏–ª—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
		var style_hover = StyleBoxFlat.new()
		style_hover.bg_color = Color(0.3, 0.7, 1.0, 1.0)
		style_hover.corner_radius_top_left = 25
		style_hover.corner_radius_top_right = 25
		style_hover.corner_radius_bottom_left = 25
		style_hover.corner_radius_bottom_right = 25
		style_hover.content_margin_top = 50
		style_hover.content_margin_bottom = 50
		style_hover.content_margin_left = 80
		style_hover.content_margin_right = 80
		play_button.add_theme_stylebox_override("hover", style_hover)
		
		print("üì± Mobile-optimized LARGE button: 600x180")
	else:
		play_button.custom_minimum_size = Vector2(300, 80)
		play_button.add_theme_font_size_override("font_size", 32)
	
	# –ö–†–ò–¢–ò–ß–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
	play_button.disabled = false
	play_button.visible = true
	play_button.mouse_filter = Control.MOUSE_FILTER_STOP
	play_button.focus_mode = Control.FOCUS_ALL
	
	var high_score = GameManager.get_high_score()
	if high_score > 0:
		high_score_label.text = I18n.translate("high_score") + ": " + str(high_score)
		high_score_label.visible = true
		
		if OS.has_feature("mobile") or OS.has_feature("web"):
			high_score_label.add_theme_font_size_override("font_size", 32)
		else:
			high_score_label.add_theme_font_size_override("font_size", 24)
	else:
		high_score_label.visible = false
	
	print("‚úÖ UI setup complete, button enabled: ", !play_button.disabled)

func _on_play_pressed():
	"""–ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
	print("üéÆ PLAY BUTTON PRESSED!")
	
	# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
	if not is_ready:
		print("‚ö†Ô∏è Game not ready yet, ignoring")
		return
	
	# –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É
	if play_button:
		play_button.disabled = true
		play_button.text = I18n.translate("loading")
	
	print("üéÆ Starting game from menu")
	
	if OS.has_feature("web"):
		YandexGames.gameplay_start()
	
	# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	await get_tree().create_timer(0.2).timeout
	
	print("üéÆ Changing scene to game.tscn")
	get_tree().change_scene_to_file("res://scenes/game.tscn")

func _input(event):
	"""–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞"""
	if not is_ready:
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–ø –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ (fallback –¥–ª—è —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤)
	if event is InputEventScreenTouch and event.pressed:
		if play_button and play_button.visible and not play_button.disabled:
			var button_rect = play_button.get_global_rect()
			# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∑–æ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
			var expanded_rect = button_rect.grow(20)
			if expanded_rect.has_point(event.position):
				print("üëÜ Global touch detected on button area!")
				get_viewport().set_input_as_handled()
				_on_play_pressed()
				return
	
	# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞/–æ—Ç–ª–∞–¥–∫–∏
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_SPACE or event.keycode == KEY_ENTER:
			if play_button and play_button.visible and not play_button.disabled:
				print("‚å®Ô∏è Keyboard shortcut - starting game")
				_on_play_pressed()
		elif event.keycode == KEY_ESCAPE:
			print("ESC pressed")
			GameManager.call_deferred("save_game_data")
			await get_tree().create_timer(0.5).timeout
			get_tree().quit()

func _notification(what):
	match what:
		NOTIFICATION_WM_CLOSE_REQUEST:
			print("üö™ Window close request")
			GameManager.call_deferred("save_game_data")
			await get_tree().create_timer(0.5).timeout
			get_tree().quit()
		
		NOTIFICATION_WM_GO_BACK_REQUEST:
			print("üîô Android back button")
			GameManager.call_deferred("save_game_data")
			await get_tree().create_timer(0.5).timeout
			get_tree().quit()
		
		NOTIFICATION_APPLICATION_FOCUS_OUT:
			print("üì± App lost focus")
			if GameManager and GameManager.game_active:
				GameManager.call_deferred("save_game_data")
		
		NOTIFICATION_APPLICATION_FOCUS_IN:
			print("üì± App gained focus")

func _exit_tree():
	print("üö™ Exiting menu")
	if play_button:
		if play_button.pressed.is_connected(_on_play_pressed):
			play_button.pressed.disconnect(_on_play_pressed)
		if play_button.gui_input.is_connected(_on_play_button_gui_input):
			play_button.gui_input.disconnect(_on_play_button_gui_input)
